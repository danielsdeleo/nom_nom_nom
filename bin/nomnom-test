#!/usr/bin/env ruby

#--
# Author:: Daniel DeLeo (<dan@opscode.com>)
# Copyright:: Copyright (c) 2010 Opscode, Inc.
# License:: Apache License, Version 2.0
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#


require 'pp'
require 'optparse'
require 'rubygems'

# For now we'll assume bundler installs only:
# Force ourselves to be in the right dir for bundler to find the Gemfile
Dir.chdir(File.expand_path("../..", __FILE__)) do
  require 'bundler/setup'
end

require 'chef'

$:.unshift(File.expand_path('../../lib', __FILE__))
require 'nom_nom_nom/status_handler'

class ReportGenerator

  attr_reader :run_status

  def initialize(status_url, opts={})
    @options = opts
    setup_reporting_data
    @handler = NomNomNom::StatusHandler.new(status_url)
  end

  def generate
    @handler.run_report_safely(@run_status)
  end

  private

  def setup_reporting_data
    @node = Chef::Node.new
    @node.name(@options[:name] || "appserver.example.com")

    @run_context = Chef::RunContext.new(@node, {})
    @run_status = Chef::RunStatus.new(@node)

    # Has to go *after* RunContext.new or else chef tries to load recipes from
    # the server :(
    @node.run_list('recipe[sudo]', 'role[base]')
    @node.automatic_attrs.merge!("recipes" => ["sudo::default", "app::server", "hosts::default"], "roles" => ["base", "appserver"])

    @run_status.run_context = @run_context

    @run_status.start_clock
    @run_status.instance_variable_set(:@end_time, Time.new + 23)

    @sudo_pkg_resource = Chef::Resource::Package.new("sudo")
    @config_file_resource = Chef::Resource::Template.new("/etc/app/config.conf")

    @sudo_pkg_resource.updated_by_last_action(true)
    @run_context.resource_collection << @sudo_pkg_resource 
    @run_context.resource_collection << @config_file_resource

    @sudo_cookbook = Chef::CookbookVersion.new("sudo")
    @sudo_cookbook.version = "1.2.3"

    @app_cookbook = Chef::CookbookVersion.new("app")
    @app_cookbook.version = '4.2.0'

    @run_context.cookbook_collection['sudo'] = @sudo_cookbook
    @run_context.cookbook_collection['app']  = @app_cookbook

    if @options[:fail]
      exception = RuntimeError.new("oops")
      exception.set_backtrace(caller)
      @run_status.exception = exception
    end

  end

end

module NomNomTestOptions

  @parser  = OptionParser.new do |o|
    o.banner = "usage: #{File.basename(__FILE__)} STATUS_SERVER_URL [options]"

    o.on("-F", "--[no-]fail", "simulate a failed chef run") do |f|
      @options[:fail] = f
    end

    o.on("-n NODE_NAME", "--name NODE_NAME", "use a different node name") do |name|
      @options[:name] = name
    end

    o.on_tail("-h", "--help", "Show this message") do
      puts o
      puts
      exit 1
    end

  end

  def self.parser
    @parser
  end

  def self.parse!(argv)
    @options = {}
    parser.parse!(argv)
    @options
  end

end

argv = ARGV.dup
options = NomNomTestOptions.parse!(argv)
puts "POSTing generated report to #{argv.first}"
ReportGenerator.new(argv.first, options).generate
puts "success"