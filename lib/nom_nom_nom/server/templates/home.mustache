<div id="header">
  Node Status
</div>
<div id="mainContentContainer">
  <div class="nodeList" id="nodeList"></div>

  <div class="horizontalSeparator"></div>

  <div class="nodeDetailContainer" id="nodeDetailContainer"></div>

  <div id="mainContentContainerExpander"></div>

</div>

<div id="footer">
  <p>Copyright &copy; 2010 Opscode, Inc.</p>
  <p>nom nom nom nom nom nom nom nom nom nom nom nom nom nom 
     nom nom nom nom nom nom nom nom nom nom nom nom nom nom
     nom nom nom nom nom nom nom nom nom nom nom </p>
</div>

<script type="text/javascript" charset="utf-8">
  var createNodeListItem = function(nodeListContainer, nodeName, nodeStatus) {
    var node_elem_id = nodeName.replace(/\./g, '_');
    nodeListContainer.append('<div id="' + node_elem_id + '" class="node ' + nodeStatus + '"><span class="nodeName">' + nodeName + '</span></div>')
    var nodeItem = $('div.node#' + node_elem_id);
    nodeItem.prepend('<span class="nodeStatus ' + nodeStatus + '"></span>');
    nodeItem.click(function() {
      $('div.node').removeClass("highlighted");
      nodeItem.addClass("highlighted");
      showNodeHistory(nodeName);
    })
  };

  var createNodeHistorySubItem = function(title, container) {
    var showMoreContentHint = '<img class="clickToSeeMore" alt="clickToSeeMore" width="8" src="img/down_triangle.png?foo" />';
    var showLessContentHint = '<img class="clickToSeeLess" alt="clickToSeeLess" width="8" src="img/up_triangle.png?foo" />';
    var hintToggleImg = '<span class="hintToggleImg">' + showMoreContentHint + showLessContentHint + '</span>';
    var titleSpan = '<span class="nodeHistoryItemHeadingText">' + title + '</span>'
    container.append('<div class="nodeHistoryItemHeading">' + hintToggleImg + titleSpan + '</div>');
    container.append('<div class="nodeHistoryItemContainer"></div>');

    var subItemContainer = $('div.nodeHistoryItemContainer:last')
    var clickToSeeMore = $('img.clickToSeeMore:last')
    var clickToSeeLess = $('img.clickToSeeLess:last')

    $('div.nodeHistoryItemHeading:last').click(function() {
      subItemContainer.slideToggle('fast');
      clickToSeeMore.toggle();
      clickToSeeLess.toggle();
    });

    return {heading : $('div.nodeHistoryItemHeading:last'), container: subItemContainer };
  };

  var showNodeCookbooksList = function(nodeHistoryContainer, nodeHistoryItem) {
    var resourcesSubItem = createNodeHistorySubItem('Cookbooks', nodeHistoryContainer);
    for (cookbook in nodeHistoryItem.cookbooks) {
      resourcesSubItem.container.append('<div>' + cookbook + ": " + nodeHistoryItem.cookbooks[cookbook] + "</div>");
    }
  };

  var showNodeResources = function(nodeHistoryContainer, nodeHistoryItem) {
    var resourceElements = [];
    // build up html to append first so we can get the count of resources
    for (resource in nodeHistoryItem.all_resources) {
      if (nodeHistoryItem.updated_resources.hasOwnProperty(resource)){
        var updated = "updated";
      }
      else {
        var updated = "notUpdated";
      }

      resourceElements.push('<h4 class="nodeResource ' + updated + '">' + resource + '</h4>');
      resourceElements.push('<div class="resourceCodeContainer"><pre class="rubyCode sh_ruby">' + nodeHistoryItem.all_resources[resource] + '</pre></div>');
    }

    var resourcesSubItem = createNodeHistorySubItem('Resources', nodeHistoryContainer);

    for (i = 0; i < resourceElements.length; i += 1){
      resourcesSubItem.container.append(resourceElements[i]);
    }
    
  };

  var showNodeRoles = function(nodeHistoryContainer, nodeHistoryItem) {
    var rolesSubItem = createNodeHistorySubItem('Roles', nodeHistoryContainer);

    for (i = 0; i < nodeHistoryItem.roles.length; i += 1){
      rolesSubItem.container.append('<div class="role">' + nodeHistoryItem.roles[i] + '</div>');
    }
  };

  var showNodeRecipes = function(nodeHistoryContainer, nodeHistoryItem) {
    var rolesSubItem = createNodeHistorySubItem('Recipes', nodeHistoryContainer);

    for (i = 0; i < nodeHistoryItem.roles.length; i += 1){
      rolesSubItem.container.append('<div class="recipe">' + nodeHistoryItem.recipes[i] + '</div>');
    }
  };

  var showNodeException = function(nodeHistoryContainer, nodeHistoryItem) {
    if (nodeHistoryItem.success == false){
      var exceptionSubItem = createNodeHistorySubItem('Exception Detail', nodeHistoryContainer);
      exceptionSubItem.container.append('<h4 class="exceptionMessage">' + nodeHistoryItem.exception + "</h4>");
      var joinedBacktrace = nodeHistoryItem.exception_backtrace.join("\n");
      exceptionSubItem.container.append('<div class="backtrace"><pre>' + joinedBacktrace + '</pre></div>');
      exceptionSubItem.heading.click();
    }
  };

  var showNodeSummary = function(nodeHistoryContainer, nodeHistoryItem) {
    // Summarize resources info
    var totalResources = 0;
    var updatedResources = 0;

    for (resource in nodeHistoryItem.all_resources) {
      totalResources += 1;
    }
    for (resource in nodeHistoryItem.updated_resources) {
      updatedResources += 1;
    }

    // Summarize run elapsed time
    var startedAt = Date.parse(nodeHistoryItem.start_time);
    var finishedAt = Date.parse(nodeHistoryItem.finish_time);
    var elapsed = (finishedAt - startedAt) / 1000;

    // display it
    var summarySubItem = createNodeHistorySubItem('Summary', nodeHistoryContainer);
    summarySubItem.container.append('<div class="nodeRuntimeSummary"> Runtime: ' + elapsed + "s</div>" );
    summarySubItem.container.append('<div class="nodeResourcesSummary">' + totalResources + " resources, " + updatedResources + " updated" + '</div>');

    summarySubItem.heading.click();

  };

  var showRunHeading = function(nodeHistoryContainer, nodeHistoryItem, runID){
    var run_start_datetime = new Date(Date.parse(nodeHistoryItem.start_time));
    if(nodeHistoryItem.success == true) {
      runHeadingClass = "successful"
    }
    else {
      runHeadingClass = "failed"
    }
    var containerId  = 'runHeadingContainer_' + runID;
    var runHeadingId = 'runHeading_' + runID;
    nodeHistoryContainer.append('<div id="' + containerId + '" class="runHeadingContainer '+ runHeadingClass +'"></div>');
    $('div#' + containerId).append('<h2 id="' + runHeadingId + '" class="runHeading">' + run_start_datetime + '</h2>');
    
  };

  var showNodeHistoryItem = function(nodeHistoryContainer, nodeName, nodeHistoryItem) {
    showNodeSummary(nodeHistoryContainer, nodeHistoryItem);
    showNodeException(nodeHistoryContainer, nodeHistoryItem);
    showNodeRoles(nodeHistoryContainer, nodeHistoryItem);
    showNodeRecipes(nodeHistoryContainer, nodeHistoryItem);
    showNodeCookbooksList(nodeHistoryContainer, nodeHistoryItem);
    showNodeResources(nodeHistoryContainer, nodeHistoryItem);

    sh_highlightDocument();

  };

  var showNodeHistory = function(nodeName) {
    $.getJSON('/api/nodes/' + nodeName, {}, function(nodeHistory) {
      //alert(nodeHistory);
      var i;
      var nodeDetailContainer = $('div#nodeDetailContainer')
      $('div#nodeDetailContainer *').remove();

      nodeDetailContainer.append('<h1 class="nodeDetailHeader">Run History - '+ nodeName + '</h1>');

      for (i = 0; i < nodeHistory.length; i += 1) {
        var nodeHistoryDivID = 'node_history_' + i;
        //alert(nodeHistory[i]);
        var nodeHistoryItem = nodeHistory[i]
        showRunHeading(nodeDetailContainer, nodeHistoryItem, i);
        nodeDetailContainer.append('<div id="' + nodeHistoryDivID + '" class="nodeHistoryItem"></div>');
        showNodeHistoryItem($('div#' + nodeHistoryDivID), nodeName, nodeHistoryItem);
      }
    })
  };

  $(document).ready(function() {
    $.getJSON('/api/nodes', {}, function(nodeList) {
      var nodeListContainer = $("div#nodeList");
      for (i = 0; i < nodeList.length; i += 1) {
        createNodeListItem(nodeListContainer, nodeList[i][0], nodeList[i][1]);
      }
    })
  })
</script>